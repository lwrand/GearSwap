-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------

-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2
    
    -- Load and initialize the include file.
    include('Mote-Include.lua')

end


-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
	include('Mote-TreasureHunter')

    state.Buff['Burst Affinity'] = buffactive['Burst Affinity'] or false
    state.Buff['Chain Affinity'] = buffactive['Chain Affinity'] or false
    state.Buff.Convergence = buffactive.Convergence or false
    state.Buff.Diffusion = buffactive.Diffusion or false
    state.Buff.Efflux = buffactive.Efflux or false
    state.Buff['Unbridled Learning'] = buffactive['Unbridled Learning'] or false

    blue_magic_maps = {}
    
    -- Mappings for gear sets to use for various blue magic spells.
    -- While STR isn't listed for each, it's generally assumed as being at least
    -- moderately significant, even for spells with other mods.
    
    -- Physical Spells --
    
    -- Physical spells with no particular (or known) stat mods
    blue_magic_maps.Physical = S{
        'Bilgestorm'
    }

    -- Spells with heavy accuracy penalties, that need to prioritize accuracy first.
    blue_magic_maps.PhysicalAcc = S{
        'Heavy Strike', 'Sudden Lunge'
    }

    -- Physical spells with Str stat mod
    blue_magic_maps.PhysicalStr = S{
        'Battle Dance','Bloodrake','Death Scissors','Dimensional Death',
        'Empty Thrash','Quadrastrike','Spinal Cleave',
        'Uppercut','Vertical Cleave'
    }
        
    -- Physical spells with Dex stat mod
    blue_magic_maps.PhysicalDex = S{
        'Amorphic Spikes','Asuran Claws','Claw Cyclone','Foot Kick','Frenetic Rip','Goblin Rush','Hysteric Barrage','Paralyzing Triad',
        'Sickle Slash','Smite of Rage','Terror Touch','Thrashing Assault',
        'Vanity Dive'
    }
        
    -- Physical spells with Vit stat mod
    blue_magic_maps.PhysicalVit = S{
        'Body Slam','Cannonball','Glutinous Dart','Grand Slam',
        'Power Attack','Quad. Continuum','Sprout Smack','Sub-zero Smash'
    }
        
    -- Physical spells with Agi stat mod
    blue_magic_maps.PhysicalAgi = S{
        'Benthic Typhoon','Feather Storm','Helldive','Hydro Shot','Jet Stream',
        'Pinecone Bomb','Spiral Spin','Wild Oats'
    }

    -- Physical spells with Int stat mod
    blue_magic_maps.PhysicalInt = S{
        'Mandibular Bite','Queasyshroom'
    }

    -- Physical spells with Mnd stat mod
    blue_magic_maps.PhysicalMnd = S{
        'Ram Charge','Screwdriver','Tourbillion'
    }

    -- Physical spells with Chr stat mod
    blue_magic_maps.PhysicalChr = S{
        'Bludgeon'
    }

    -- Physical spells with HP stat mod
    blue_magic_maps.PhysicalHP = S{
        'Final Sting'
    }

    -- Magical Spells --

    -- Magical spells with the typical Int mod
    blue_magic_maps.Magical = S{
        'Blastbomb','Blazing Bound','Bomb Toss','Cursed Sphere','Dark Orb','Death Ray',
        'Droning Whirlwind','Embalming Earth','Firespit','Foul Waters','Ice Break','Retinal Glare',
        'Leafstorm','Maelstrom','Regurgitation','Rending Deluge','Subduction','Tem. Upheaval','Water Bomb','Sandspin','Entomb','Spectral Floe','Palling Salvo','Charged Whisker'
    }

    -- Magical spells with a primary Mnd mod
    blue_magic_maps.MagicalMnd = S{
        'Acrid Stream','Evryone. Grudge','Magic Hammer','Mind Blast'
    }

    -- Magical spells with a primary Chr mod
    blue_magic_maps.MagicalChr = S{
        'Eyes On Me','Mysterious Light'
    }

    -- Magical spells with a Vit stat mod (on top of Int)
    blue_magic_maps.MagicalVit = S{
        'Thermal Pulse'
    }

    -- Magical spells with a Dex stat mod (on top of Int)
    blue_magic_maps.MagicalDex = S{
        'Gates of Hades'
    }
            
    -- Magical spells (generally debuffs) that we want to focus on magic accuracy over damage.
    -- Add Int for damage where available, though.
    blue_magic_maps.MagicAccuracy = S{
        '1000 Needles','Absolute Terror','Actinic Burst','Auroral Drape','Awful Eye',
        'Blistering Roar','Blood Drain','Blood Saber','Chaotic Eye',
        'Cimicine Discharge','Cold Wave','Corrosive Ooze','Demoralizing Roar','Digest',
        'Dream Flower','Enervation','Feather Tickle','Filamented Hold','Frightful Roar',
        'Geist Wall','Hecatomb Wave','Jettatura','Lowing','Mind Blast','Mortal Ray','MP Drainkiss','Osmosis','Reaving Wind',
        'Sandspray','Sheep Song','Soporific','Sound Blast','Stinking Gas',
        'Sub-zero Smash','Venom Shell','Voracious Trunk','Yawn','Blank Gaze','Temporal Shift','Thunderbolt','Tenebral Crush', 'Anvil Lightning'
    }
        
    -- Breath-based spells
    blue_magic_maps.Breath = S{
        'Bad Breath','Flying Hip Press','Frost Breath','Heat Breath',
        'Hecatomb Wave','Magnetite Cloud','Poison Breath','Self-Destruct',
        'Thunder Breath','Vapor Spray','Wind Breath'
    }

    -- Stun spells
    blue_magic_maps.Stun = S{
    }
        
    -- Healing spells
    blue_magic_maps.Healing = S{
        'Healing Breeze','Magic Fruit','Plenilune Embrace','Pollen','White Wind',
        'Wild Carrot'
    }
    
    -- Buffs that depend on blue magic skill
    blue_magic_maps.SkillBasedBuff = S{
        'Barrier Tusk','Diamondhide','Magic Barrier','Metallic Body','Plasma Charge','Whirl of Rage','Pyric Bulwark','Reactor Cool','Occultation',
		'Blitzstrahl','Frypan','Head Butt','Tail Slap','Disseverment','Barbed Crescent','Delta Thrust','Seedspray','Light of Penance','Radiant Breath','Mighty Guard','Infrasonics'
    }

    -- Other general buffs
    blue_magic_maps.Buff = S{
        'Amplification','Animating Wail','Battery Charge','Carcharian Verve','Cocoon',
        'Erratic Flutter','Exuviation','Fantod','Feather Barrier','Harden Shell',
        'Memento Mori','Nat. Meditation','Orcish Counterstance','Refueling',
        'Regeneration','Saline Coat','Triumphant Roar','Warm-Up','Winds of Promyvion',
        'Zephyr Mantle'
    }
    
    
    -- Spells that require Unbridled Learning to cast.
    unbridled_spells = S{
        'Absolute Terror','Bilgestorm','Blistering Roar','Bloodrake','Carcharian Verve',
        'Droning Whirlwind','Gates of Hades','Harden Shell','Pyric Bulwark','Thunderbolt',
        'Tourbillion'
    }
end

-------------------------------------------------------------------------------------------------------------------
-- User setup functions for this job.  Recommend that these be overridden in a sidecar file.
-------------------------------------------------------------------------------------------------------------------

-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
    state.OffenseMode:options('Normal', 'Acc', 'Refresh', 'Learning')
    state.WeaponskillMode:options('Normal', 'Acc')
    state.CastingMode:options('Normal', 'Resistant')
    state.IdleMode:options('Normal', 'PDT', 'Learning')

    gear.macc_hagondes = {name="Hagondes Cuffs", augments={'Phys. dmg. taken -3%','Mag. Acc.+29'}}

    -- Additional local binds
    --send_command('bind ^` input /ja "Chain Affinity" <me>')
    --send_command('bind !` input /ja "Burst Affinity" <me>')
	send_command('bind f6 gs c cycle treasuremode')
    
	update_combat_form()
    select_default_macro_book()
end


-- Called when this job file is unloaded (eg: job change)
function user_unload()
    --send_command('unbind ^`')
    --send_command('unbind !`')
	send_command('unbind f6')
end


-- Set up gear sets.
function init_gear_sets()
    --------------------------------------
    -- Start defining the sets
    --------------------------------------

    sets.buff['Burst Affinity'] = {feet="Mavi Basmak +2"}
    sets.buff['Chain Affinity'] = {head="Hashishin Kavuk",feet="Assimilator's Charuqs +2"}
    sets.buff.Convergence = {head="Luhlaza Keffiyeh +1"}
    sets.buff.Diffusion = {feet="Luhlaza Charuqs +1"}
    sets.buff.Enchainment = {body="Luhlaza Jubbah"}
    sets.buff.Efflux = {legs="Hashishin Tayt"}
    sets.TreasureHunter = {head={ name="Herculean Helm", augments={'VIT+10','Chance of successful block +2','"Treasure Hunter"+2','Accuracy+1 Attack+1','Mag. Acc.+12 "Mag.Atk.Bns."+12',}}, main="Tizona", waist="Chaac Belt", sub={ name="Colada", augments={'Magic dmg. taken -1%','Attack+21','"Treasure Hunter"+1','DMG:+2',}}}
	
    -- Precast Sets
    
    -- Precast sets to enhance JAs
    sets.precast.JA['Azure Lore'] = {hands="Mirage Bazubands +2"}

    -- Waltz set (chr and vit)
    sets.precast.Waltz = {ammo="Sonia's Plectrum",
        head="Uk'uxkaj Cap",
        body="Vanir Cotehardie",hands="Buremte Gloves",ring1="Spiral Ring",
        back="Iximulew Cape",waist="Caudata Belt",legs="Hagondes Pants",feet="Iuitl Gaiters +1"}
        
    -- Don't need any special gear for Healing Waltz.
    sets.precast.Waltz['Healing Waltz'] = {}

    -- Fast cast sets for spells
    
    sets.precast.FC = {ammo="Impatiens",
        head={ name="Herculean Helm", augments={'VIT+10','Chance of successful block +2','"Treasure Hunter"+2','Accuracy+1 Attack+1','Mag. Acc.+12 "Mag.Atk.Bns."+12',}},ear2="Loquacious Earring",ear1="Etiolation Earring",
        body="Samnuha Coat",hands="Thaumas Gloves",ring1="Kishar Ring",
        back="Swith Cape +1",waist="Witful Belt",legs="Ayanmo Cosciales +1",feet="Chelona Boots +1"}
        
    sets.precast.FC['Blue Magic'] = set_combine(sets.precast.FC, {})

       
    -- Weaponskill sets
    -- Default set for any weaponskill that isn't any more specifically defined
    sets.precast.WS = {
        head="Uk'uxkaj Cap",neck=gear.ElementalGorget,ear1="Bladeborn Earring",ear2="Steelflash Earring",
        body="Qaaxo Harness",hands="Assimilator's Bazubands +1",ring1="Rajas Ring",ring2="Epona's Ring",
        back="Mecistopins Mantle",waist=gear.ElementalBelt,legs="Manibozho Brais",feet="Luhlaza Charuqs +1"}

	-- head="Uk'uxkaj Cap"
    sets.precast.WS.acc = set_combine(sets.precast.WS, {hands="Buremte Gloves"})

    -- Specific weaponskill sets.  Uses the base set if an appropriate WSMod version isn't found.
    sets.precast.WS['Requiescat'] = set_combine(sets.precast.WS, {waist="Soil Belt",neck="Soil Gorget",feet="Luhlaza Charuqs +1",back="Pahtli Cape",legs="Quiahuiz Trousers",feet="Luhlaza Charuqs +1",ring1="Aquasoul Ring",ring2="Aquasoul Ring",ammo="Aqua Sachet"})
	
	sets.precast.WS['Chant du Cygne'] = set_combine(sets.precast.WS, {
		head="Ayanmo Zucchetto +1",
		ring1="Apate Ring",
		body="Ayanmo Corazza +1",
		hands={ name="Adhemar wristbands", augments={'DEX+10','Attack+15','STR+15',}},
		waist="Fotia Belt",
		neck="Fotia Gorget",
		back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10',}},
		legs="Samnuha Tights",
		feet="Ayanmo Gambieras +1",
		ammo="Jukukik Feather",
		ear1="Mache earring",
		ear2="Brutal Earring",
		ring2="Epona's Ring"
	})

    sets.precast.WS['Sanguine Blade'] = {
        head="Pixie Hairpin +1",neck="Eddy Necklace",waist="Yamabuki-no-obi",ear1="Friomisi Earring",ear2="Hecate's Earring",
        body="Hagondes Coat",hands="Mavi Bazubands +2",ring1="Acumen Ring",ring2="Strendu Ring",
        back="Cornflower Cape",legs="Hagondes Pants",feet="Manabyss Pigaches"}
    
    
    -- Midcast Sets
    sets.midcast.FastRecast = {
        head="Haruspex Hat",ear2="Loquacious Earring",
        body="Luhlaza Jubbah",hands="Mavi Bazubands +2",ring1="Prolix Ring",
        back="Swith Cape +1",waist="Hurch'lan Sash",legs="Enif Cosciales",feet="Iuitl Gaiters +1"}
        
    sets.midcast['Blue Magic'] = {}
    
    -- Physical Spells --
    
    sets.midcast['Blue Magic'].Physical = {ammo="Ginsen",
        head="Lithelimb Cap",neck="Justice Torque",ear1="Bladeborn Earring",ear2="Steelflash Earring",
        body="Assimilator's Jubbah +2",hands="Umuthi Gloves",ring1="Rajas Ring",ring2="Vulcan's Ring",
        back="Mecistopins Mantle",waist="Prosilio Belt +1",legs="Luhlaza Shalwar +1",feet="Luhlaza Charuqs +1"}
		
    sets.midcast['Blue Magic'].PhysicalAcc = {ammo="Ginsen",head="Ayanmo Zucchetto +1",neck="Subtlety Spectacles",body="Ayanmo Corazza +1",
			ring1="Rajas Ring",ring2="Epona's Ring",waist="Olseni Belt",
			legs="Ayanmo Cosciales +1",feet="Ayanmo Gambieras +1",ear2="Brutal Earring",
			ear1="Suppanomimi",back="Rosmerta's Cape",hands="Ayanmo Manopolas +1"}

    sets.midcast['Blue Magic'].PhysicalStr = set_combine(sets.midcast['Blue Magic'].Physical,{waist="Prosilio Belt +1",back="Buquwik Cape"})

    sets.midcast['Blue Magic'].PhysicalDex = set_combine(sets.midcast['Blue Magic'].Physical,
        {ring1="Thundersoul Ring",ring2="Thundersoul Ring",ear1="Pixie Earring",ear2="Thunder Pearl",body="Assimilator's Jubbah +2",
		ammo="Jukukik Feather",head="Uk'uxkaj Cap",
		hands="Thurandaut Gloves +1",feet="Luhlaza Charuqs +1"})

    sets.midcast['Blue Magic'].PhysicalVit = set_combine(sets.midcast['Blue Magic'].Physical,
        {head="Luhlaza Keffiyeh +1",body="Assimilator's Jubbah +2",hands="Assimilator's Bazubands +1",back="Iximulew Cape"})

    sets.midcast['Blue Magic'].PhysicalAgi = set_combine(sets.midcast['Blue Magic'].Physical,
        {body="Vanir Cotehardie",hands="Iuitl Wristbands",ring2="Stormsoul Ring",
         waist="Chaac Belt",feet="Luhlaza Charuqs +1"})

    sets.midcast['Blue Magic'].PhysicalInt = set_combine(sets.midcast['Blue Magic'].Physical,
        {ear1="Psystorm Earring",body="Vanir Cotehardie",hands="Assimilator's Bazubands +1",
         ring2="Icesoul Ring",back="Toro Cape",feet="Luhlaza Charuqs +1"})

    sets.midcast['Blue Magic'].PhysicalMnd = set_combine(sets.midcast['Blue Magic'].Physical,
        {ear1="Lifestorm Earring",body="Vanir Cotehardie",hands="Assimilator's Bazubands +1",
         ring2="Aquasoul Ring",back="Refraction Cape"})

    sets.midcast['Blue Magic'].PhysicalChr = set_combine(sets.midcast['Blue Magic'].Physical,
        {body="Vanir Cotehardie",hands="Assimilator's Bazubands +1",back="Refraction Cape",
         waist="Chaac Belt"})

    sets.midcast['Blue Magic'].PhysicalHP = set_combine(sets.midcast['Blue Magic'].Physical)


    -- Magical Spells --
    
    sets.midcast['Blue Magic'].Magical = {ammo="Pemphredo Tathlum",
        head="Jhakri Coronal +1",neck="Sanctity Necklace",ear1="Friomisi Earring",ear2="Regal Earring",
        body="Jhakri Robe +2",hands="Jhakri Cuffs +1",ring2="Strendu Ring",ring1="Acumen Ring",
        back="Cornflower Cape",waist="Yamabuki-no-obi",legs="Jhakri Slops +1",feet="Jhakri Pigaches +1"}
		
    sets.midcast['Blue Magic'].Magical.Resistant = set_combine(sets.midcast['Blue Magic'].Magical,
        {head="Jhakri Coronal +1",legs="Jhakri Slops +1"})
    
    sets.midcast['Blue Magic'].MagicalMnd = set_combine(sets.midcast['Blue Magic'].Magical,
        {ammo="Aqua Sachet",neck="Fotia Gorget",ring2="Aqua Ring",ring2="Solemn Ring",waist="Fotia Belt",back="Pahtli Cape"})

    sets.midcast['Blue Magic'].MagicalChr = set_combine(sets.midcast['Blue Magic'].Magical)

    sets.midcast['Blue Magic'].MagicalVit = set_combine(sets.midcast['Blue Magic'].Magical,
        {ring1="Spiral Ring"})

    sets.midcast['Blue Magic'].MagicalDex = set_combine(sets.midcast['Blue Magic'].Magical)

    sets.midcast['Blue Magic'].MagicAccuracy = {
		ammo="Mavi Tathlum",
        head="Ayanmo Zucchetto +1",
		neck="Quanpur Necklace",
		ear1="Lifestorm Earring",
		ear2="Psystorm Earring",
        body="Ayanmo Corazza +1",
		hands="Ayanmo Manopolas +1",
		ring2="Strendu Ring",
		ring1="Arvina Ringlet +1",
        back="Cornflower Cape",
		waist="Aswang Sash",
		legs="Ayanmo Cosciales +1",
		feet="Ayanmo Gambieras +1"
	}
		
    -- Breath Spells --
    
    sets.midcast['Blue Magic'].Breath = {ammo="Mavi Tathlum",
        head="Luhlaza Keffiyeh +1",neck="Ej Necklace",ear1="Lifestorm Earring",ear2="Psystorm Earring",
        body="Vanir Cotehardie",hands="Assimilator's Bazubands +1",ring1="K'ayres Ring",ring2="Beeline Ring",
        back="Refraction Cape",legs="Enif Cosciales",feet="Iuitl Gaiters"}

    -- Other Types --
    
    sets.midcast['Blue Magic'].Stun = set_combine(sets.midcast['Blue Magic'].MagicAccuracy,
        {legs="Luhlaza Shalwar +1",back="Cornflower Cape",body="Hashishin Mintan",hands="Hagondes Cuffs",feet="Iuitl Gaiters"})
        
    sets.midcast['Blue Magic']['White Wind'] = {
        head="Whirlpool Mask",neck="Lavalier +1",ear1="Bloodgem Earring",ear2="Loquacious Earring",
        body="Vanir Cotehardie",hands="Buremte Gloves",ring1="K'ayres Ring",ring2="Meridian Ring",
        back="Fravashi Mantle",waist="Hurch'lan Sash",legs="Enif Cosciales",feet="Hagondes Sabots"}

    sets.midcast['Blue Magic'].Healing = {
        head="Uk'uxkaj Cap",ear1="Lifestorm Earring",ear2="Loquacious Earring",
        body="Vanir Cotehardie",hands="Buremte Gloves",ring1="Aquasoul Ring",ring2="Sirona's Ring",
        back="Pahtli Cape",legs="Hagondes Pants",feet="Hagondes Sabots"}
	
    sets.midcast['Blue Magic'].SkillBasedBuff = {ammo="Mavi Tathlum", head="Luhlaza Keffiyeh +1", body="Assimilator's Jubbah +2", back="Cornflower Cape",legs="Hashishin Tayt",feet="Luhlaza Charuqs +1",neck="Mavi Scarf",ammo="Mavi Tathlum",hands="Symbios Gloves",ring1="Renaye Ring"}

    sets.midcast['Blue Magic'].Buff = {}
    
    sets.midcast.Protect = {ring1="Sheltered Ring"}
    sets.midcast.Protectra = {ring1="Sheltered Ring"}
    sets.midcast.Shell = {ring1="Sheltered Ring"}
    sets.midcast.Shellra = {ring1="Sheltered Ring"}
    

    
    
    -- Sets to return to when not performing an action.

    -- Gear for learning spells: +skill and AF hands.
    sets.Learning = {ammo="Mavi Tathlum",neck="Mavi Scarf",ear1="Bladeborn Earring",body="Assimilator's Jubbah +2",head="Luhlaza Keffiyeh +1",ring1="Renaye Ring",ring2="Epona's Ring",legs="Hashishin Tayt",feet="Luhlaza Charuqs +1",ear2="Steelflash Earring",back="Cornflower Cape",hands="Magus Bazubands"}

    sets.latent_refresh = {waist="Fucho-no-obi"}

    -- Resting sets
    sets.resting = {
        head="Yigit Turban",neck="Grandiose Chain",
        body="Yigit Gomlek",hands="Yigit Gages",ring1="Sheltered Ring",ring2="Paguroidea Ring",
        waist="Hierarch Belt",feet="Yigit Crackows",ear1="Relaxing Earring",ear2="Magnetic Earring",back="Invigorating Cape",legs="Yigit Seraweels"}
    
    -- Idle sets
	
	--sets.idle = {ammo="Impatiens",
    --    neck="Twilight Torque",ear1="Moonshade Earring",ear2="Loquacious Earring",
    --    body="Assimilator's Jubbah +2",hands="Adhemar wristbands",ring1="Defending Ring",ring2="Dark Ring",
    --    back="Rosmerta's Cape",waist="Flume Belt +1",legs="Samnuha Tights",feet="Ayanmo Gambieras +1",head="Ayanmo Zucchetto +1"}
	
	--sets.engaged.DW.Acc = {ammo="Inlamvuyeso",head="Ayanmo Zucchetto +1",body="Assimilator's Jubbah +2",ring1="Rajas Ring",ring2="Epona's Ring",waist="Olseni Belt",legs="Samnuha Tights",feet="Ayanmo Gambieras +1",ear2="Brutal --Earring",ear1="Suppanomimi",back="Rosmerta's Cape",hands="Adhemar wristbands",neck="Fortitude Torque"}
	
	-- ORIGINALE
	sets.idle = {ammo="Ginsen",
        head="Ayanmo Zucchetto +1",neck="Twilight Torque",ear1="Moonshade Earring",ear2="Loquacious Earring",
        body="Jhakri Robe +2",hands={ name="Adhemar wristbands", augments={'DEX+10','Attack+15','STR+15',}},ring1="Warp Ring",ring2="Renaye Ring",
        back="Mecistopins Mantle",waist="Flume Belt +1",legs="Stearc Subligar",feet="Ayanmo Gambieras +1"}
	
	sets.idle.PDT = {ammo="Demonry Stone",head="Lithelimb Cap",neck="Twilight Torque",body="Assimilator's Jubbah +2",ring1="Defending Ring",ring2="Dark Ring",waist="Flume Belt +1",legs="Luhlaza Shalwar +1",feet="Rawhide boots",ear2="Ethereal Earring",ear1="Suppanomimi",back="Cornflower Cape",hands="Buremte Gloves"}
    
	--sets.idle.PDT = {ammo="Ginsen",
    --    head="Wivre Hairpin",neck="Wiglen Gorget",ear1="Moonshade Earring",ear2="Loquacious Earring",
    --    body="Assimilator's Jubbah +1",hands="Iuitl Wristbands",ring1="Defending Ring",ring2="Paguroidea Ring",
    --    back="Shadow Mantle",waist="Flume Belt +1",legs="Stearc Subligar",feet="Serpentes Sabots"}

    --sets.idle.Town = {ammo="Mavi Tathlum",
    --    head="Wivre Hairpin",neck="Fortitude Torque",ear1="Moonshade Earring",
    --    body="Assimilator's Jubbah +1",hands="Serpentes Cuffs",ring1="Rajas Ring",ring2="Epona's Ring",
    --    back="Atheling Mantle",waist="Flume Belt +1",legs="Crimson Cuisses",feet="Serpentes Sabots",ear2="Steelflash Earring"}

    --sets.idle.Learning = set_combine(sets.idle, sets.Learning)

    
    -- Defense sets
    sets.defense.PDT = {ammo="Iron Gobbet",
    head="Ayanmo Zucchetto +1",neck="Twilight Torque",ear1="Bloodgem Earring",
    body="Ayanmo Corazza +1",hands="Ayanmo Manopolas +1",ring1="Defending Ring",ring2="Dark Ring",
    back="Engulfer Cape",waist="Flume Belt +1",legs="Ayanmo Cosciales +1",feet="Ayanmo Gambieras +1"}

    sets.defense.MDT = {ammo="Demonry Stone",
        head="Ayanmo Zucchetto +1",neck="Twilight Torque",ear1="Bloodgem Earring",
        body="Ayanmo Corazza +1",hands="Ayanmo Manopolas +1",ring1="Defending Ring",ring2="Dark Ring",
        back="Engulfer Cape",waist="Flume Belt +1",legs="Ayanmo Cosciales +1",feet="Ayanmo Gambieras +1"}

    sets.Kiting = {legs="Carmine Cuisses"}

    -- Engaged sets

    -- Variations for TP weapon and (optional) offense/defense modes.  Code will fall back on previous
    -- sets if more refined versions aren't defined.
    -- If you create a set with both offense and defense modes, the offense mode should be first.
    -- EG: sets.engaged.Dagger.Accuracy.Evasion
    
    -- Normal melee group
    sets.engaged = {
	ammo="Ginsen",head="Ayanmo Zucchetto +1",neck="Asperity Necklace",body="Ayanmo Corazza +1",
	ring1="Rajas Ring",ring2="Epona's Ring",waist="Kentarch Belt +1",legs="Samnuha Tights",
	feet="Ayanmo Gambieras +1",ear2="Brutal Earring",ear1="Suppanomimi",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10',}},hands="Ayanmo Manopolas +1"}

	-- Croex: to check in-game
	sets.engaged.Acc = {ammo="Ginsen",head="Ayanmo Zucchetto +1",neck="Asperity Necklace",
	body="Ayanmo Corazza +1",ring1="Rajas Ring",ring2="Epona's Ring",
	waist="Kentarch Belt +1",legs="Samnuha Tights",feet="Ayanmo Gambieras +1",
	ear2="Brutal Earring",ear1="Suppanomimi",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10',}},hands="Ayanmo Manopolas +1"}
     
    sets.engaged.Refresh = {ammo="Ginsen",
        neck="Justice Torque",ear2="Brutal Earring",ear1="Suppanomimi",head="Aetosaur Helm",
        body="Thaumas Coat",hands="Adhemar wristbands",ring1="Rajas Ring",ring2="Renaye Ring",
        back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10',}},waist="Windbuffet Belt",legs="Aetosaur Trousers",feet="Manibozho Boots"}
	
	sets.engaged.DW = {ammo="Ginsen",head="Ayanmo Zucchetto +1",neck="Asperity Necklace",body="Ayanmo Corazza +1",
	ring1="Rajas Ring",ring2="Epona's Ring",waist="Kentarch Belt +1",legs="Samnuha Tights",feet="Herculean Boots",
	ear2="Brutal Earring",ear1="Suppanomimi",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','DEX+10','Crit.hit rate+10',}},hands="Adhemar Wristbands"}
	
    sets.engaged.DW.Acc = {ammo="Ginsen",head="Ayanmo Zucchetto +1",body="Assimilator's Jubbah +2",
	ring1="Rajas Ring",ring2="Epona's Ring",waist="Kentarch Belt +1",
	legs="Samnuha Tights",feet="Herculean Boots",ear2="Brutal Earring",ear1="Suppanomimi",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10',}},hands="Adhemar wristbands",neck="Asperity Necklace"}

    sets.engaged.DW.Refresh = {ammo="Ginsen",
        head="Aetosaur Helm",neck="Justice Torque",ear2="Brutal Earring",ear1="Suppanomimi",
        body="Aetosaur Jerkin",hands="Aetosaur Gloves",ring1="Rajas Ring",ring2="Epona's Ring",
        back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10',}},waist="Windbuffet Belt",legs="Aetosaur Trousers",feet="Manibozho Boots"}

    sets.engaged.Learning = set_combine(sets.engaged, sets.Learning)
    sets.engaged.DW.Learning = set_combine(sets.engaged.DW, sets.Learning)


    sets.self_healing = {ring1="Kunaji Ring",ring2="Asklepian Ring"}
end

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------

-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
function job_precast(spell, action, spellMap, eventArgs)
    if unbridled_spells:contains(spell.english) and not state.Buff['Unbridled Learning'] then
        eventArgs.cancel = true
        windower.send_command('@input /ja "Unbridled Learning" <me>; wait 1.5; input /ma "'..spell.name..'" '..spell.target.name)
    end
end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
    -- Add enhancement gear for Chain Affinity, etc.
    if spell.skill == 'Blue Magic' then
        for buff,active in pairs(state.Buff) do
            if active and sets.buff[buff] then
                equip(sets.buff[buff])
            end
        end
        if spellMap == 'Healing' and spell.target.type == 'SELF' and sets.self_healing then
            equip(sets.self_healing)
        end
		-- Subduction THF rule
		-- if spell.id == 708 and 
		if spell.target.type ~= 'SELF' and state.TreasureMode.value == 'Tag' and player.target.hpp == 100 then
			equip(set_combine(sets.midcast['Blue Magic'].Magical, sets.TreasureHunter))
			--add_to_chat(122, 'Test')
		end 
    end

    -- If in learning mode, keep on gear intended to help with that, regardless of action.
    if state.OffenseMode.value == 'Learning' then
        equip(sets.Learning)
    end
end


-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
    if state.Buff[buff] ~= nil then
        state.Buff[buff] = gain
    end
end

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Custom spell mapping.
-- Return custom spellMap value that can override the default spell mapping.
-- Don't return anything to allow default spell mapping to be used.
function job_get_spell_map(spell, default_spell_map)
    if spell.skill == 'Blue Magic' then
        for category,spell_list in pairs(blue_magic_maps) do
            if spell_list:contains(spell.english) then
                return category
            end
        end
    end
end

-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    if player.mpp < 51 then
        set_combine(idleSet, sets.latent_refresh)
    end
    return idleSet
end

-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_update(cmdParams, eventArgs)
    update_combat_form()
end


-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

function update_combat_form()
    -- Check for H2H or single-wielding
    if player.equipment.sub == "Genbu's Shield" or player.equipment.sub == 'empty' then
        state.CombatForm:reset()
    else
        state.CombatForm:set('DW')
    end
end


-- Select default macro book on initial load or subjob change.
function select_default_macro_book()
    -- Default macro set/book
    if player.sub_job == 'DNC' then
        set_macro_page(1, 7)
    else
        set_macro_page(1, 7)
    end
end


